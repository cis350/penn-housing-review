{"ast":null,"code":"import axios from 'axios';\nimport { rootURL } from \"../utils/utils\";\n\n// use try catch to handle error\nexport const getAllPosts = async () => {\n  try {\n    const res = await axios.get(`${rootURL}/posts`);\n    // console.log(\"get all posts\", res.data);\n    return res.data;\n  } catch (err) {\n    console.error(\"error\", err.message);\n  }\n};\nexport const getFilteredPost = async (category, housingType) => {\n  try {\n    const url = `${rootURL}/posts?category=${category}&housingType=${housingType}`;\n    const res = await axios.get(url);\n    // console.log(\"get filtered posts\", res.data);\n    return res.data;\n  } catch (err) {\n    console.error(\"error\", err.message);\n  }\n};\nexport const getFilteredPostByCategory = async category => {\n  try {\n    const url = `${rootURL}/posts?category=${category}`;\n    const res = await axios.get(url);\n    // console.log(\"get filtered posts by category\", res.data);\n    return res.data;\n  } catch (err) {\n    console.error(\"error\", err.message);\n  }\n};\nexport const getFilteredPostByHousingType = async housingType => {\n  try {\n    const url = `${rootURL}/posts?housingType=${housingType}`;\n    const res = await axios.get(url);\n    // console.log(\"get filtered posts by housing type\", res.data);\n    return res.data;\n  } catch (err) {\n    console.error(\"error\", err.message);\n  }\n};\nexport const updatePostLike = async (updateLikes, pid) => {\n  try {\n    console.log(\"pid\", pid);\n    console.log(\"updateLikes\", updateLikes);\n    const response = await axios.patch(`${rootURL}/posts/${pid}`, {\n      likes: updateLikes\n    });\n    console.log(\"update likes\", response.data);\n    return response.data;\n  } catch (err) {\n    console.error(\"error\", err.message);\n  }\n};\nexport const updateCommentLike = async (updateLikes, cid) => {\n  try {\n    console.log(\"cid\", cid);\n    const response = await axios.patch(`${rootURL}/comments/${cid}`, {\n      likes: updateLikes\n    });\n    console.log(\"update likes\", response.data);\n    return response.data;\n  } catch (err) {\n    console.error(\"error\", err.message);\n  }\n};\nexport const getAllCommentsByPostId = async pid => {\n  try {\n    const res = await axios.get(`${rootURL}/comments?pid=${pid}`);\n    // console.log(\"get all comments by post id\", res.data);\n    return res.data;\n  } catch (err) {\n    console.error(\"error\", err.message);\n  }\n};\nexport const createComment = async (pid, content) => {\n  try {\n    const response = await axios.post(`${rootURL}/comments`, {\n      pid: pid,\n      content: content,\n      likes: 0\n    });\n    console.log(\"create comment\", response.data);\n    return response.data;\n  } catch (err) {\n    console.error(\"error\", err.message);\n  }\n};\nexport const addNewPost = async (title, content, category, housingType, user, uid) => {\n  try {\n    const response = await axios.post(`${rootURL}/posts`, {\n      title: title,\n      content: content,\n      category: category,\n      housingType: housingType,\n      comments: 0,\n      likes: 0\n    });\n    console.log(\"add new post\", response.data);\n    return response.data;\n  } catch (err) {\n    console.error(\"error\", err.message);\n  }\n};\ndescribe('getAllCommentsByPostId', () => {\n  it('returns comments by post id', async () => {\n    const pid = 123;\n    const comments = [{\n      id: 1,\n      content: 'Comment 1'\n    }, {\n      id: 2,\n      content: 'Comment 2'\n    }];\n    axios.get.mockResolvedValueOnce({\n      data: comments\n    });\n    const result = await getAllCommentsByPostId(pid);\n    expect(axios.get).toHaveBeenCalledTimes(1);\n    expect(axios.get).toHaveBeenCalledWith(`${rootURL}/comments?pid=${pid}`);\n    expect(result).toEqual(comments);\n  });\n  it('handles errors', async () => {\n    const pid = 123;\n    const errorMessage = 'Error message';\n    axios.get.mockRejectedValueOnce({\n      message: errorMessage\n    });\n    const result = await getAllCommentsByPostId(pid);\n    expect(axios.get).toHaveBeenCalledTimes(1);\n    expect(axios.get).toHaveBeenCalledWith(`${rootURL}/comments?pid=${pid}`);\n    expect(result).toBeUndefined();\n    expect(console.error).toHaveBeenCalledWith('error', errorMessage);\n  });\n});","map":{"version":3,"names":["axios","rootURL","getAllPosts","res","get","data","err","console","error","message","getFilteredPost","category","housingType","url","getFilteredPostByCategory","getFilteredPostByHousingType","updatePostLike","updateLikes","pid","log","response","patch","likes","updateCommentLike","cid","getAllCommentsByPostId","createComment","content","post","addNewPost","title","user","uid","comments","describe","it","id","mockResolvedValueOnce","result","expect","toHaveBeenCalledTimes","toHaveBeenCalledWith","toEqual","errorMessage","mockRejectedValueOnce","toBeUndefined"],"sources":["/Users/jie/Desktop/penn-housing/penn-housing-review/src/api/FBMainAPI.js"],"sourcesContent":["import axios from 'axios';\nimport { rootURL } from \"../utils/utils\";\n\n// use try catch to handle error\nexport const getAllPosts = async () => {\n    try {\n        const res = await axios.get(`${rootURL}/posts`);\n        // console.log(\"get all posts\", res.data);\n        return res.data;\n\n    }\n    catch (err) {\n        console.error(\"error\", err.message);\n    }\n}\n\nexport const getFilteredPost = async (category, housingType) => {\n    try {\n        const url = `${rootURL}/posts?category=${category}&housingType=${housingType}`;\n        const res = await axios.get(url);\n        // console.log(\"get filtered posts\", res.data);\n        return res.data;\n    }\n    catch (err) {\n        console.error(\"error\", err.message);\n    }\n}\n\nexport const getFilteredPostByCategory = async (category) => {\n    try {\n        const url = `${rootURL}/posts?category=${category}`;\n        const res = await axios.get(url);\n        // console.log(\"get filtered posts by category\", res.data);\n        return res.data;\n    }\n    catch (err) {\n        console.error(\"error\", err.message);\n    }\n}\n\nexport const getFilteredPostByHousingType = async (housingType) => {\n    try {\n        const url = `${rootURL}/posts?housingType=${housingType}`;\n        const res = await axios.get(url);\n        // console.log(\"get filtered posts by housing type\", res.data);\n        return res.data;\n    }\n    catch (err) {\n        console.error(\"error\", err.message);\n    }\n}\n\nexport const updatePostLike = async(updateLikes, pid) => {\n    try {\n        console.log(\"pid\", pid);\n        console.log(\"updateLikes\", updateLikes);\n        const response = await axios.patch(`${rootURL}/posts/${pid}`, {\n            likes: updateLikes\n        });\n        console.log(\"update likes\", response.data);\n        return response.data;\n    } catch (err) {\n        console.error(\"error\", err.message);\n    }\n}\n\nexport const updateCommentLike = async(updateLikes, cid) => {\n    try {\n        console.log(\"cid\", cid);\n        const response = await axios.patch(`${rootURL}/comments/${cid}`, {\n            likes: updateLikes\n        });\n        console.log(\"update likes\", response.data);\n        return response.data;\n    } catch (err) {\n        console.error(\"error\", err.message);\n    }\n}\n\nexport const getAllCommentsByPostId = async (pid) => {\n    try {\n        const res = await axios.get(`${rootURL}/comments?pid=${pid}`);\n        // console.log(\"get all comments by post id\", res.data);\n        return res.data;\n    } catch (err) {\n        console.error(\"error\", err.message);\n    }\n}\n\nexport const createComment = async (pid, content) => {\n    try {\n        const response = await axios.post(`${rootURL}/comments`, {\n            pid: pid,\n            content: content,\n            likes: 0,\n        });\n        console.log(\"create comment\", response.data);\n        return response.data;\n    } catch (err) {\n        console.error(\"error\", err.message);\n    }\n}\n\n\nexport const addNewPost = async (title, content, category, housingType, user, uid) => {\n    try {\n        const response = await axios.post(`${rootURL}/posts`,{\n            title: title,\n            content: content,\n            category: category,\n            housingType: housingType,\n            comments: 0,\n            likes: 0,\n        });\n        console.log(\"add new post\", response.data);\n        return response.data\n    } catch (err) {\n        console.error(\"error\", err.message);\n    }\n}\n\ndescribe('getAllCommentsByPostId', () => {\n    it('returns comments by post id', async () => {\n      const pid = 123;\n      const comments = [{ id: 1, content: 'Comment 1' }, { id: 2, content: 'Comment 2' }];\n      axios.get.mockResolvedValueOnce({ data: comments });\n  \n      const result = await getAllCommentsByPostId(pid);\n  \n      expect(axios.get).toHaveBeenCalledTimes(1);\n      expect(axios.get).toHaveBeenCalledWith(`${rootURL}/comments?pid=${pid}`);\n      expect(result).toEqual(comments);\n    });\n  \n    it('handles errors', async () => {\n      const pid = 123;\n      const errorMessage = 'Error message';\n      axios.get.mockRejectedValueOnce({ message: errorMessage });\n  \n      const result = await getAllCommentsByPostId(pid);\n  \n      expect(axios.get).toHaveBeenCalledTimes(1);\n      expect(axios.get).toHaveBeenCalledWith(`${rootURL}/comments?pid=${pid}`);\n      expect(result).toBeUndefined();\n      expect(console.error).toHaveBeenCalledWith('error', errorMessage);\n    });\n  });\n  "],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}