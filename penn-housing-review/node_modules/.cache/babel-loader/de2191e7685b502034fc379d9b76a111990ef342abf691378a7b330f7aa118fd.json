{"ast":null,"code":"import axios from \"axios\";\n\n/*async function searchHouse(keyword, limit) {\n  // Create an object with keyword and limit properties\n  const params = { keyword, limit };\n  // Return a promise that resolves with the response data or rejects with an error\n  return axios.get('/posts/search', { params })\n    .then(response => response.houseName)\n    .catch(error => {\n      // Handle different error scenarios\n      if (error.response) {\n        // The request was made and the server responded with a status code that falls out of the range of 2xx\n        console.error('Error status', error.response.status);\n        console.error('Error data', error.response.data);\n      } else if (error.request) {\n        // The request was made but no response was received\n        console.error('No response', error.request);\n      } else {\n        // Something happened in setting up the request that triggered an Error\n        console.error('Error message', error.message);\n      }\n      // Reject the promise with the error object\n      return Promise.reject(error);\n    });\n}*/\n\n/*async function searchHouse(keyword, limit) {\n  // Create an object with keyword and limit properties\n  const params = { keyword, limit };\n  // Return a promise that resolves with the response data or rejects with an error\n  return axios.get('/posts/search', { params })\n    .then(response => {\n      // Filter the response data by houseName property\n      return response.data.filter(post => post.search.houseName.includes(keyword));\n    })\n    .catch(error => {\n      // Handle different error scenarios\n      if (error.response) {\n        // The request was made and the server responded with a status code that falls out of the range of 2xx\n        console.error('Error status', error.response.status);\n        console.error('Error data', error.response.data);\n      } else if (error.request) {\n        // The request was made but no response was received\n        console.error('No response', error.request);\n      } else {\n        // Something happened in setting up the request that triggered an Error\n        console.error('Error message', error.message);\n      }\n      // Reject the promise with the error object\n      return Promise.reject(error);\n    });\n}*/\n\nexport const searchHouse = async (keyword, limit) => {\n  // Create an object with keyword and limit properties\n  const params = {\n    keyword,\n    limit\n  };\n  // Return a promise that resolves with the response data or rejects with an error\n  return axios.get('http://localhost:3500/search').then(response => {\n    // Filter the response data by houseName property\n\n    const filtered = response.data.filter(search => search.houseName.includes(keyword.toUpperCase()));\n    const results = filtered.map(search => search.houseName);\n    return results;\n  }).catch(error => {\n    // Handle different error scenarios\n    if (error.response) {\n      // The request was made and the server responded with a status code that falls out of the range of 2xx\n      console.error('Error status', error.response.status);\n      console.error('Error data', error.response.data);\n    } else if (error.request) {\n      // The request was made but no response was received\n      console.error('No response', error.request);\n    } else {\n      // Something happened in setting up the request that triggered an Error\n      console.error('Error message', error.message);\n    }\n    // Reject the promise with the error object\n    return Promise.reject(error);\n  });\n};\n\n/*\nasync function searchHouse (keyword, limit){\n  // Create an object with keyword and limit properties\n  const params = { keyword, limit };\n  // Return a promise that resolves with the response data or rejects with an error\n  return axios.get('http://localhost:3500/search')\n    .then(response => {\n      // Filter the response data by houseName property\n\n      const filtered = response.data.filter(search => search.houseName.includes(keyword.toUpperCase()));\n      const results = filtered.map(search => search.houseName);\n      return results;\n    })\n    .catch(error => {\n      // Handle different error scenarios\n      if (error.response) {\n        // The request was made and the server responded with a status code that falls out of the range of 2xx\n        console.error('Error status', error.response.status);\n        console.error('Error data', error.response.data);\n      } else if (error.request) {\n        // The request was made but no response was received\n        console.error('No response', error.request);\n      } else {\n        // Something happened in setting up the request that triggered an Error\n        console.error('Error message', error.message);\n      }\n      // Reject the promise with the error object\n      return Promise.reject(error);\n    });\n}\n\n\nexport default searchHouse;*/","map":{"version":3,"names":["axios","searchHouse","keyword","limit","params","get","then","response","filtered","data","filter","search","houseName","includes","toUpperCase","results","map","catch","error","console","status","request","message","Promise","reject"],"sources":["/Users/xinyuanfan/Documents/UPenn/Academics/2023-Sophomore-Spring/CIS3500/penn-housing-review/penn-housing-review/src/api/MainSearchApi.js"],"sourcesContent":["import axios from \"axios\";\n\n/*async function searchHouse(keyword, limit) {\n  // Create an object with keyword and limit properties\n  const params = { keyword, limit };\n  // Return a promise that resolves with the response data or rejects with an error\n  return axios.get('/posts/search', { params })\n    .then(response => response.houseName)\n    .catch(error => {\n      // Handle different error scenarios\n      if (error.response) {\n        // The request was made and the server responded with a status code that falls out of the range of 2xx\n        console.error('Error status', error.response.status);\n        console.error('Error data', error.response.data);\n      } else if (error.request) {\n        // The request was made but no response was received\n        console.error('No response', error.request);\n      } else {\n        // Something happened in setting up the request that triggered an Error\n        console.error('Error message', error.message);\n      }\n      // Reject the promise with the error object\n      return Promise.reject(error);\n    });\n}*/\n\n/*async function searchHouse(keyword, limit) {\n  // Create an object with keyword and limit properties\n  const params = { keyword, limit };\n  // Return a promise that resolves with the response data or rejects with an error\n  return axios.get('/posts/search', { params })\n    .then(response => {\n      // Filter the response data by houseName property\n      return response.data.filter(post => post.search.houseName.includes(keyword));\n    })\n    .catch(error => {\n      // Handle different error scenarios\n      if (error.response) {\n        // The request was made and the server responded with a status code that falls out of the range of 2xx\n        console.error('Error status', error.response.status);\n        console.error('Error data', error.response.data);\n      } else if (error.request) {\n        // The request was made but no response was received\n        console.error('No response', error.request);\n      } else {\n        // Something happened in setting up the request that triggered an Error\n        console.error('Error message', error.message);\n      }\n      // Reject the promise with the error object\n      return Promise.reject(error);\n    });\n}*/\n\nexport const searchHouse = async (keyword, limit) => {\n  // Create an object with keyword and limit properties\n  const params = { keyword, limit };\n  // Return a promise that resolves with the response data or rejects with an error\n  return axios.get('http://localhost:3500/search')\n    .then(response => {\n      // Filter the response data by houseName property\n\n      const filtered = response.data.filter(search => search.houseName.includes(keyword.toUpperCase()));\n      const results = filtered.map(search => search.houseName);\n      return results;\n    })\n    .catch(error => {\n      // Handle different error scenarios\n      if (error.response) {\n        // The request was made and the server responded with a status code that falls out of the range of 2xx\n        console.error('Error status', error.response.status);\n        console.error('Error data', error.response.data);\n      } else if (error.request) {\n        // The request was made but no response was received\n        console.error('No response', error.request);\n      } else {\n        // Something happened in setting up the request that triggered an Error\n        console.error('Error message', error.message);\n      }\n      // Reject the promise with the error object\n      return Promise.reject(error);\n    });\n}\n\n/*\nasync function searchHouse (keyword, limit){\n  // Create an object with keyword and limit properties\n  const params = { keyword, limit };\n  // Return a promise that resolves with the response data or rejects with an error\n  return axios.get('http://localhost:3500/search')\n    .then(response => {\n      // Filter the response data by houseName property\n\n      const filtered = response.data.filter(search => search.houseName.includes(keyword.toUpperCase()));\n      const results = filtered.map(search => search.houseName);\n      return results;\n    })\n    .catch(error => {\n      // Handle different error scenarios\n      if (error.response) {\n        // The request was made and the server responded with a status code that falls out of the range of 2xx\n        console.error('Error status', error.response.status);\n        console.error('Error data', error.response.data);\n      } else if (error.request) {\n        // The request was made but no response was received\n        console.error('No response', error.request);\n      } else {\n        // Something happened in setting up the request that triggered an Error\n        console.error('Error message', error.message);\n      }\n      // Reject the promise with the error object\n      return Promise.reject(error);\n    });\n}\n\n\nexport default searchHouse;*/"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAMC,WAAW,GAAG,MAAAA,CAAOC,OAAO,EAAEC,KAAK,KAAK;EACnD;EACA,MAAMC,MAAM,GAAG;IAAEF,OAAO;IAAEC;EAAM,CAAC;EACjC;EACA,OAAOH,KAAK,CAACK,GAAG,CAAC,8BAA8B,CAAC,CAC7CC,IAAI,CAACC,QAAQ,IAAI;IAChB;;IAEA,MAAMC,QAAQ,GAAGD,QAAQ,CAACE,IAAI,CAACC,MAAM,CAACC,MAAM,IAAIA,MAAM,CAACC,SAAS,CAACC,QAAQ,CAACX,OAAO,CAACY,WAAW,EAAE,CAAC,CAAC;IACjG,MAAMC,OAAO,GAAGP,QAAQ,CAACQ,GAAG,CAACL,MAAM,IAAIA,MAAM,CAACC,SAAS,CAAC;IACxD,OAAOG,OAAO;EAChB,CAAC,CAAC,CACDE,KAAK,CAACC,KAAK,IAAI;IACd;IACA,IAAIA,KAAK,CAACX,QAAQ,EAAE;MAClB;MACAY,OAAO,CAACD,KAAK,CAAC,cAAc,EAAEA,KAAK,CAACX,QAAQ,CAACa,MAAM,CAAC;MACpDD,OAAO,CAACD,KAAK,CAAC,YAAY,EAAEA,KAAK,CAACX,QAAQ,CAACE,IAAI,CAAC;IAClD,CAAC,MAAM,IAAIS,KAAK,CAACG,OAAO,EAAE;MACxB;MACAF,OAAO,CAACD,KAAK,CAAC,aAAa,EAAEA,KAAK,CAACG,OAAO,CAAC;IAC7C,CAAC,MAAM;MACL;MACAF,OAAO,CAACD,KAAK,CAAC,eAAe,EAAEA,KAAK,CAACI,OAAO,CAAC;IAC/C;IACA;IACA,OAAOC,OAAO,CAACC,MAAM,CAACN,KAAK,CAAC;EAC9B,CAAC,CAAC;AACN,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}